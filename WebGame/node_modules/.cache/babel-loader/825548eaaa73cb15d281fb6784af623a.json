{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useContext, useRef } from \"react\";\nimport { gameContext } from \"./useContext\";\nimport useCollisionDetector from \"./useCollisionDetector\";\nimport useStanze from \"./useStanze\";\n\nconst usePlayer = () => {\n  _s();\n\n  const {\n    playerRef\n  } = useContext(gameContext);\n  const {\n    checkCambioStanza,\n    updatePlayerPos\n  } = useStanze();\n  const {\n    collisionDetectorX,\n    collisionDetectorY\n  } = useCollisionDetector();\n  const player = useRef({\n    x: 1104,\n    y: 384,\n    dim: 96,\n    step: 48\n  });\n\n  const setPlayer = (dato, val) => {\n    if (dato === \"x\") {\n      player.current.x = val;\n    } else if (dato === \"y\") {\n      player.current.y = val;\n    } else if (dato === \"dim\") {\n      player.current.dim = val;\n    } else {\n      player.current.step = val;\n    }\n  };\n\n  const getPlayer = dato => {\n    if (dato === \"x\") {\n      return player.current.x;\n    } else if (dato === \"y\") {\n      return player.current.y;\n    } else if (dato === \"dim\") {\n      return player.current.dim;\n    } else {\n      return player.current.step;\n    }\n  };\n\n  const playerCmds = [{\n    name: \"left\",\n    keys: [\"arrowleft\", \"a\"],\n    func: () => {\n      if (collisionDetectorX(getPlayer(\"x\"), getPlayer(\"y\"), -getPlayer(\"step\"))) {\n        setPlayer(\"x\", getPlayer(\"x\") - getPlayer(\"step\"));\n      }\n    }\n  }, {\n    name: \"right\",\n    keys: [\"arrowright\", \"d\"],\n    func: () => {\n      if (collisionDetectorX(getPlayer(\"x\"), getPlayer(\"y\"), getPlayer(\"step\"))) {\n        setPlayer(\"x\", getPlayer(\"x\") + getPlayer(\"step\"));\n      }\n    }\n  }, {\n    name: \"up\",\n    keys: [\"arrowup\", \"w\"],\n    func: () => {\n      if (collisionDetectorY(getPlayer(\"x\"), getPlayer(\"y\"), -getPlayer(\"step\"))) {\n        setPlayer(\"y\", getPlayer(\"y\") - getPlayer(\"step\"));\n      }\n    }\n  }, {\n    name: \"down\",\n    keys: [\"arrowdown\", \"s\"],\n    func: () => {\n      if (collisionDetectorY(getPlayer(\"x\"), getPlayer(\"y\"), getPlayer(\"step\"))) {\n        setPlayer(\"y\", getPlayer(\"y\") + getPlayer(\"step\"));\n      }\n    }\n  }];\n  let playerImgIndex = 1;\n\n  const animate = cmdName => {\n    playerRef.current.src = \"/img/characters/kiki/\" + cmdName + \"/\" + playerImgIndex + \".png\";\n\n    if (playerImgIndex >= 3) {\n      playerImgIndex = 1;\n    } else {\n      playerImgIndex++;\n    }\n  };\n\n  const playerController = pressedKey => {\n    for (let cmd of playerCmds) {\n      if (cmd[\"keys\"].includes(pressedKey)) {\n        cmd[\"func\"]();\n        let cmdName = cmd[\"name\"];\n        animate(cmdName);\n        let returnCheckCambioStanza = checkCambioStanza(getPlayer(\"x\"), getPlayer(\"y\"), cmdName);\n\n        if (Array.isArray(returnCheckCambioStanza)) {\n          updatePlayerPos(setPlayer, returnCheckCambioStanza);\n        }\n      }\n    }\n  };\n\n  return {\n    setPlayer,\n    getPlayer,\n    playerController\n  };\n};\n\n_s(usePlayer, \"Nm7AsIYh5ZRUZBhmcacgBfOoB4o=\", false, function () {\n  return [useStanze, useCollisionDetector];\n});\n\nexport default usePlayer;","map":{"version":3,"sources":["/home/stud5c/Scrivania/KikisKey/WebGame/src/Hooks/usePlayer.js"],"names":["useContext","useRef","gameContext","useCollisionDetector","useStanze","usePlayer","playerRef","checkCambioStanza","updatePlayerPos","collisionDetectorX","collisionDetectorY","player","x","y","dim","step","setPlayer","dato","val","current","getPlayer","playerCmds","name","keys","func","playerImgIndex","animate","cmdName","src","playerController","pressedKey","cmd","includes","returnCheckCambioStanza","Array","isArray"],"mappings":"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","sourcesContent":["import { useContext, useRef } from \"react\";\n\nimport { gameContext } from \"./useContext\";\nimport useCollisionDetector from \"./useCollisionDetector\";\nimport useStanze from \"./useStanze\";\n\nconst usePlayer = () => {\n  const { playerRef } = useContext(gameContext);\n\n  const { checkCambioStanza, updatePlayerPos } = useStanze();\n  const { collisionDetectorX, collisionDetectorY } = useCollisionDetector();\n\n  const player = useRef({\n    x: 1104,\n    y: 384,\n    dim: 96,\n    step: 48,\n  });\n\n  const setPlayer = (dato, val) => {\n    if (dato === \"x\") {\n      player.current.x = val;\n    } else if (dato === \"y\") {\n      player.current.y = val;\n    } else if (dato === \"dim\") {\n      player.current.dim = val;\n    } else {\n      player.current.step = val;\n    }\n  };\n\n  const getPlayer = (dato) => {\n    if (dato === \"x\") {\n      return player.current.x;\n    } else if (dato === \"y\") {\n      return player.current.y;\n    } else if (dato === \"dim\") {\n      return player.current.dim;\n    } else {\n      return player.current.step;\n    }\n  };\n\n  const playerCmds = [\n    {\n      name: \"left\",\n      keys: [\"arrowleft\", \"a\"],\n      func: () => {\n        if (\n          collisionDetectorX(getPlayer(\"x\"), getPlayer(\"y\"), -getPlayer(\"step\"))\n        ) {\n          setPlayer(\"x\", getPlayer(\"x\") - getPlayer(\"step\"));\n        }\n      },\n    },\n    {\n      name: \"right\",\n      keys: [\"arrowright\", \"d\"],\n      func: () => {\n        if (\n          collisionDetectorX(getPlayer(\"x\"), getPlayer(\"y\"), getPlayer(\"step\"))\n        ) {\n          setPlayer(\"x\", getPlayer(\"x\") + getPlayer(\"step\"));\n        }\n      },\n    },\n    {\n      name: \"up\",\n      keys: [\"arrowup\", \"w\"],\n      func: () => {\n        if (\n          collisionDetectorY(getPlayer(\"x\"), getPlayer(\"y\"), -getPlayer(\"step\"))\n        ) {\n          setPlayer(\"y\", getPlayer(\"y\") - getPlayer(\"step\"));\n        }\n      },\n    },\n    {\n      name: \"down\",\n      keys: [\"arrowdown\", \"s\"],\n      func: () => {\n        if (\n          collisionDetectorY(getPlayer(\"x\"), getPlayer(\"y\"), getPlayer(\"step\"))\n        ) {\n          setPlayer(\"y\", getPlayer(\"y\") + getPlayer(\"step\"));\n        }\n      },\n    },\n  ];\n\n  let playerImgIndex = 1;\n\n  const animate = (cmdName) => {\n    playerRef.current.src =\n      \"/img/characters/kiki/\" + cmdName + \"/\" + playerImgIndex + \".png\";\n\n    if (playerImgIndex >= 3) {\n      playerImgIndex = 1;\n    } else {\n      playerImgIndex++;\n    }\n  };\n\n  const playerController = (pressedKey) => {\n    for (let cmd of playerCmds) {\n      if (cmd[\"keys\"].includes(pressedKey)) {\n        cmd[\"func\"]();\n        let cmdName = cmd[\"name\"];\n        animate(cmdName);\n\n        let returnCheckCambioStanza = checkCambioStanza(\n          getPlayer(\"x\"),\n          getPlayer(\"y\"),\n          cmdName\n        );\n\n        if (Array.isArray(returnCheckCambioStanza)) {\n          updatePlayerPos(setPlayer, returnCheckCambioStanza);\n        }\n      }\n    }\n  };\n\n  return { setPlayer, getPlayer, playerController };\n};\n\nexport default usePlayer;\n"]},"metadata":{},"sourceType":"module"}