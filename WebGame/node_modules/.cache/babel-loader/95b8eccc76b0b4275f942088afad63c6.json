{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport useStanze from \"./useStanze\";\n\nconst useCollisionDetector = () => {\n  _s();\n\n  const {\n    getStanzaCorrente\n  } = useStanze();\n\n  const collisionDetectorX = (playerX, playerY, playerStep) => {\n    let x = Math.floor((playerX + playerStep) / getStanzaCorrente().tileSize);\n    let y = Math.floor(playerY / getStanzaCorrente().tileSize);\n\n    if (getStanzaCorrente().collision[y][x] === 1) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  const collisionDetectorY = (playerX, playerY, playerStep) => {\n    let x = Math.floor(playerX / getStanzaCorrente().tileSize);\n    let y = Math.floor((playerY + playerStep) / getStanzaCorrente().tileSize);\n\n    if (getStanzaCorrente().collision[y][x] === 1) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  return {\n    collisionDetectorX,\n    collisionDetectorY\n  };\n};\n\n_s(useCollisionDetector, \"pTEzC6HeGivgFbSn1wzdW80sE+I=\", false, function () {\n  return [useStanze];\n});\n\nexport default useCollisionDetector;","map":{"version":3,"sources":["/home/stud5c/Scrivania/KikisKey/WebGame/src/Hooks/useCollisionDetector.js"],"names":["useStanze","useCollisionDetector","getStanzaCorrente","collisionDetectorX","playerX","playerY","playerStep","x","Math","floor","tileSize","y","collision","collisionDetectorY"],"mappings":";;AAAA,OAAOA,SAAP,MAAsB,aAAtB;;AAEA,MAAMC,oBAAoB,GAAG,MAAM;AAAA;;AACjC,QAAM;AAAEC,IAAAA;AAAF,MAAwBF,SAAS,EAAvC;;AAEA,QAAMG,kBAAkB,GAAG,CAACC,OAAD,EAAUC,OAAV,EAAmBC,UAAnB,KAAkC;AAC3D,QAAIC,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACL,OAAO,GAAGE,UAAX,IAAyBJ,iBAAiB,GAAGQ,QAAxD,CAAR;AACA,QAAIC,CAAC,GAAGH,IAAI,CAACC,KAAL,CAAWJ,OAAO,GAAGH,iBAAiB,GAAGQ,QAAzC,CAAR;;AAEA,QAAIR,iBAAiB,GAAGU,SAApB,CAA8BD,CAA9B,EAAiCJ,CAAjC,MAAwC,CAA5C,EAA+C;AAC7C,aAAO,KAAP;AACD,KAFD,MAEO;AACL,aAAO,IAAP;AACD;AACF,GATD;;AAWA,QAAMM,kBAAkB,GAAG,CAACT,OAAD,EAAUC,OAAV,EAAmBC,UAAnB,KAAkC;AAC3D,QAAIC,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWL,OAAO,GAAGF,iBAAiB,GAAGQ,QAAzC,CAAR;AACA,QAAIC,CAAC,GAAGH,IAAI,CAACC,KAAL,CAAW,CAACJ,OAAO,GAAGC,UAAX,IAAyBJ,iBAAiB,GAAGQ,QAAxD,CAAR;;AAEA,QAAIR,iBAAiB,GAAGU,SAApB,CAA8BD,CAA9B,EAAiCJ,CAAjC,MAAwC,CAA5C,EAA+C;AAC7C,aAAO,KAAP;AACD,KAFD,MAEO;AACL,aAAO,IAAP;AACD;AACF,GATD;;AAWA,SAAO;AAAEJ,IAAAA,kBAAF;AAAsBU,IAAAA;AAAtB,GAAP;AACD,CA1BD;;GAAMZ,oB;UAC0BD,S;;;AA2BhC,eAAeC,oBAAf","sourcesContent":["import useStanze from \"./useStanze\";\n\nconst useCollisionDetector = () => {\n  const { getStanzaCorrente } = useStanze();\n\n  const collisionDetectorX = (playerX, playerY, playerStep) => {\n    let x = Math.floor((playerX + playerStep) / getStanzaCorrente().tileSize);\n    let y = Math.floor(playerY / getStanzaCorrente().tileSize);\n\n    if (getStanzaCorrente().collision[y][x] === 1) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  const collisionDetectorY = (playerX, playerY, playerStep) => {\n    let x = Math.floor(playerX / getStanzaCorrente().tileSize);\n    let y = Math.floor((playerY + playerStep) / getStanzaCorrente().tileSize);\n\n    if (getStanzaCorrente().collision[y][x] === 1) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  return { collisionDetectorX, collisionDetectorY };\n};\n\nexport default useCollisionDetector;\n"]},"metadata":{},"sourceType":"module"}