{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useContext, useRef, useState } from \"react\";\nimport { gameContext } from \"./useContext\";\nimport useStanze from \"./useStanze\";\nimport useQuizData from \"./useQuizData\";\n\nconst useQuizScreen = actionBtn => {\n  _s();\n\n  const {\n    gameData,\n    setShowQuizScreen\n  } = useContext(gameContext);\n  const {\n    getStanzaCorrente\n  } = useStanze();\n  const {\n    listaQuiz,\n    checkPointQuiz\n  } = useQuizData();\n  const arrIndexQuizScelti = useRef([]);\n  const arrQuizScelti = useRef([]);\n  const totalCheckPointQuiz = checkPointQuiz.current.length;\n  const totalQuiz = listaQuiz.current.length;\n\n  for (let i = 0; i < totalCheckPointQuiz; i++) {\n    let numRand = Math.floor(Math.random() * totalQuiz);\n    arrIndexQuizScelti.current.push(numRand);\n  }\n\n  for (let i = 0; i < totalCheckPointQuiz; i++) {\n    arrQuizScelti.current[i] = listaQuiz.current[arrIndexQuizScelti.current[i]];\n  }\n\n  const QuizScreenController = (pressedKey, playerX, playerY) => {\n    for (let i = 0; i < totalCheckPointQuiz; i++) {\n      if (pressedKey == actionBtn && getStanzaCorrente().name === checkPointQuiz.current[i].stanza.name && playerX === checkPointQuiz.current[i].stanza.x && playerY === checkPointQuiz.current[i].stanza.y) {\n        setShowQuizScreen(prev => !prev);\n        gameData.current.quizCorrente.nomeQuiz = checkPointQuiz.current[i].name;\n        gameData.current.quizCorrente.domanda = arrQuizScelti.current[i].domanda;\n        gameData.current.quizCorrente.risposta = arrQuizScelti.current[i].risposta;\n        gameData.current.quizCorrente.ricompensa = checkPointQuiz.current[i].ricompensa;\n      }\n    }\n  };\n\n  return {\n    QuizScreenController\n  };\n};\n\n_s(useQuizScreen, \"nrKo6dtgJ9R1w7J/38k1pxG4t+I=\", false, function () {\n  return [useStanze, useQuizData];\n});\n\nexport default useQuizScreen;","map":{"version":3,"sources":["/home/stud5c/Scrivania/KikisKey/WebGame/src/Hooks/useQuizScreen.js"],"names":["useContext","useRef","useState","gameContext","useStanze","useQuizData","useQuizScreen","actionBtn","gameData","setShowQuizScreen","getStanzaCorrente","listaQuiz","checkPointQuiz","arrIndexQuizScelti","arrQuizScelti","totalCheckPointQuiz","current","length","totalQuiz","i","numRand","Math","floor","random","push","QuizScreenController","pressedKey","playerX","playerY","name","stanza","x","y","prev","quizCorrente","nomeQuiz","domanda","risposta","ricompensa"],"mappings":";;AAAA,SAASA,UAAT,EAAqBC,MAArB,EAA6BC,QAA7B,QAA6C,OAA7C;AACA,SAASC,WAAT,QAA4B,cAA5B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,MAAMC,aAAa,GAAIC,SAAD,IAAe;AAAA;;AACnC,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAkCT,UAAU,CAACG,WAAD,CAAlD;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAwBN,SAAS,EAAvC;AAEA,QAAM;AAAEO,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAAgCP,WAAW,EAAjD;AACA,QAAMQ,kBAAkB,GAAGZ,MAAM,CAAC,EAAD,CAAjC;AACA,QAAMa,aAAa,GAAGb,MAAM,CAAC,EAAD,CAA5B;AAEA,QAAMc,mBAAmB,GAAGH,cAAc,CAACI,OAAf,CAAuBC,MAAnD;AACA,QAAMC,SAAS,GAAGP,SAAS,CAACK,OAAV,CAAkBC,MAApC;;AAEA,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,mBAApB,EAAyCI,CAAC,EAA1C,EAA8C;AAC5C,QAAIC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,SAA3B,CAAd;AACAL,IAAAA,kBAAkB,CAACG,OAAnB,CAA2BQ,IAA3B,CAAgCJ,OAAhC;AACD;;AAED,OAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,mBAApB,EAAyCI,CAAC,EAA1C,EAA8C;AAC5CL,IAAAA,aAAa,CAACE,OAAd,CAAsBG,CAAtB,IAA2BR,SAAS,CAACK,OAAV,CAAkBH,kBAAkB,CAACG,OAAnB,CAA2BG,CAA3B,CAAlB,CAA3B;AACD;;AAED,QAAMM,oBAAoB,GAAG,CAACC,UAAD,EAAaC,OAAb,EAAsBC,OAAtB,KAAkC;AAC7D,SAAK,IAAIT,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,mBAApB,EAAyCI,CAAC,EAA1C,EAA8C;AAC5C,UACEO,UAAU,IAAInB,SAAd,IACAG,iBAAiB,GAAGmB,IAApB,KAA6BjB,cAAc,CAACI,OAAf,CAAuBG,CAAvB,EAA0BW,MAA1B,CAAiCD,IAD9D,IAEAF,OAAO,KAAKf,cAAc,CAACI,OAAf,CAAuBG,CAAvB,EAA0BW,MAA1B,CAAiCC,CAF7C,IAGAH,OAAO,KAAKhB,cAAc,CAACI,OAAf,CAAuBG,CAAvB,EAA0BW,MAA1B,CAAiCE,CAJ/C,EAKE;AACAvB,QAAAA,iBAAiB,CAAEwB,IAAD,IAAU,CAACA,IAAZ,CAAjB;AAEAzB,QAAAA,QAAQ,CAACQ,OAAT,CAAiBkB,YAAjB,CAA8BC,QAA9B,GAAyCvB,cAAc,CAACI,OAAf,CAAuBG,CAAvB,EAA0BU,IAAnE;AAEArB,QAAAA,QAAQ,CAACQ,OAAT,CAAiBkB,YAAjB,CAA8BE,OAA9B,GACEtB,aAAa,CAACE,OAAd,CAAsBG,CAAtB,EAAyBiB,OAD3B;AAGA5B,QAAAA,QAAQ,CAACQ,OAAT,CAAiBkB,YAAjB,CAA8BG,QAA9B,GACEvB,aAAa,CAACE,OAAd,CAAsBG,CAAtB,EAAyBkB,QAD3B;AAGA7B,QAAAA,QAAQ,CAACQ,OAAT,CAAiBkB,YAAjB,CAA8BI,UAA9B,GACE1B,cAAc,CAACI,OAAf,CAAuBG,CAAvB,EAA0BmB,UAD5B;AAED;AACF;AACF,GAtBD;;AAwBA,SAAO;AACLb,IAAAA;AADK,GAAP;AAGD,CA/CD;;GAAMnB,a;UAE0BF,S,EAEQC,W;;;AA6CxC,eAAeC,aAAf","sourcesContent":["import { useContext, useRef, useState } from \"react\";\nimport { gameContext } from \"./useContext\";\nimport useStanze from \"./useStanze\";\nimport useQuizData from \"./useQuizData\";\n\nconst useQuizScreen = (actionBtn) => {\n  const { gameData, setShowQuizScreen } = useContext(gameContext);\n  const { getStanzaCorrente } = useStanze();\n\n  const { listaQuiz, checkPointQuiz } = useQuizData();\n  const arrIndexQuizScelti = useRef([]);\n  const arrQuizScelti = useRef([]);\n\n  const totalCheckPointQuiz = checkPointQuiz.current.length;\n  const totalQuiz = listaQuiz.current.length;\n\n  for (let i = 0; i < totalCheckPointQuiz; i++) {\n    let numRand = Math.floor(Math.random() * totalQuiz);\n    arrIndexQuizScelti.current.push(numRand);\n  }\n\n  for (let i = 0; i < totalCheckPointQuiz; i++) {\n    arrQuizScelti.current[i] = listaQuiz.current[arrIndexQuizScelti.current[i]];\n  }\n\n  const QuizScreenController = (pressedKey, playerX, playerY) => {\n    for (let i = 0; i < totalCheckPointQuiz; i++) {\n      if (\n        pressedKey == actionBtn &&\n        getStanzaCorrente().name === checkPointQuiz.current[i].stanza.name &&\n        playerX === checkPointQuiz.current[i].stanza.x &&\n        playerY === checkPointQuiz.current[i].stanza.y\n      ) {\n        setShowQuizScreen((prev) => !prev);\n\n        gameData.current.quizCorrente.nomeQuiz = checkPointQuiz.current[i].name;\n\n        gameData.current.quizCorrente.domanda =\n          arrQuizScelti.current[i].domanda;\n\n        gameData.current.quizCorrente.risposta =\n          arrQuizScelti.current[i].risposta;\n\n        gameData.current.quizCorrente.ricompensa =\n          checkPointQuiz.current[i].ricompensa;\n      }\n    }\n  };\n\n  return {\n    QuizScreenController,\n  };\n};\n\nexport default useQuizScreen;\n"]},"metadata":{},"sourceType":"module"}