{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useContext } from \"react\";\nimport { gameContext } from \"./useContext\";\n\nconst useStanze = () => {\n  _s();\n\n  const {\n    stanze,\n    gameData\n  } = useContext(gameContext);\n  const {\n    stanzaLayer1Ref,\n    stanzaLayer2Ref\n  } = useContext(gameContext);\n\n  const setPortaStanza = (nomeStanza, indexPorta, chiusaBool) => {\n    for (let i = 0; i < stanze.current.length; i++) {\n      if (stanze.current[i].name === nomeStanza) {\n        stanze.current[i].porte[indexPorta].chiusa = chiusaBool;\n      }\n    }\n  };\n\n  const getStanzaCorrente = () => {\n    for (let stanza of stanze.current) {\n      if (stanza[\"name\"] === gameData.current[\"stanzaCorrente\"]) {\n        return stanza;\n      }\n    }\n  };\n\n  const updatePlayerPos = (setPlayer, arrNewPos) => {\n    setPlayer(\"x\", arrNewPos[0]);\n    setPlayer(\"y\", arrNewPos[1]);\n  };\n\n  const checkCambioStanza = (playerX, playerY, cmdName) => {\n    let arrPorteStanza = getStanzaCorrente().porte;\n\n    for (let i = 0; i < arrPorteStanza.length; i++) {\n      if (playerX === arrPorteStanza[i].x && playerY === arrPorteStanza[i].y && cmdName === arrPorteStanza[i].key && arrPorteStanza[i].chiusa === false) {\n        gameData.current[\"stanzaCorrente\"] = arrPorteStanza[i].stanza;\n        stanzaLayer1Ref.current.src = \"/img/stanze/\" + arrPorteStanza[i].stanza + \"/layer1.png\";\n        stanzaLayer2Ref.current.src = \"/img/stanze/\" + arrPorteStanza[i].stanza + \"/layer2.png\";\n        let spawnPlayerX = arrPorteStanza[i].spawnPlayer[0];\n        let spawnPlayerY = arrPorteStanza[i].spawnPlayer[1];\n        return [spawnPlayerX, spawnPlayerY];\n      }\n    }\n\n    return false;\n  };\n\n  return {\n    getStanzaCorrente,\n    setPortaStanza,\n    checkCambioStanza,\n    updatePlayerPos\n  };\n};\n\n_s(useStanze, \"oZNyD6xEoQRQIGRR+ln5BLagZWQ=\");\n\nexport default useStanze;","map":{"version":3,"sources":["/home/stud5c/Scrivania/KikisKey/WebGame/src/Hooks/useStanze.js"],"names":["useContext","gameContext","useStanze","stanze","gameData","stanzaLayer1Ref","stanzaLayer2Ref","setPortaStanza","nomeStanza","indexPorta","chiusaBool","i","current","length","name","porte","chiusa","getStanzaCorrente","stanza","updatePlayerPos","setPlayer","arrNewPos","checkCambioStanza","playerX","playerY","cmdName","arrPorteStanza","x","y","key","src","spawnPlayerX","spawnPlayer","spawnPlayerY"],"mappings":"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","sourcesContent":["import { useContext } from \"react\";\nimport { gameContext } from \"./useContext\";\n\nconst useStanze = () => {\n  const { stanze, gameData } = useContext(gameContext);\n  const { stanzaLayer1Ref, stanzaLayer2Ref } = useContext(gameContext);\n\n  const setPortaStanza = (nomeStanza, indexPorta, chiusaBool) => {\n    for (let i = 0; i < stanze.current.length; i++) {\n      if (stanze.current[i].name === nomeStanza) {\n        stanze.current[i].porte[indexPorta].chiusa = chiusaBool;\n      }\n    }\n  };\n\n  const getStanzaCorrente = () => {\n    for (let stanza of stanze.current) {\n      if (stanza[\"name\"] === gameData.current[\"stanzaCorrente\"]) {\n        return stanza;\n      }\n    }\n  };\n\n  const updatePlayerPos = (setPlayer, arrNewPos) => {\n    setPlayer(\"x\", arrNewPos[0]);\n    setPlayer(\"y\", arrNewPos[1]);\n  };\n\n  const checkCambioStanza = (playerX, playerY, cmdName) => {\n    let arrPorteStanza = getStanzaCorrente().porte;\n    for (let i = 0; i < arrPorteStanza.length; i++) {\n      if (\n        playerX === arrPorteStanza[i].x &&\n        playerY === arrPorteStanza[i].y &&\n        cmdName === arrPorteStanza[i].key &&\n        arrPorteStanza[i].chiusa === false\n      ) {\n        gameData.current[\"stanzaCorrente\"] = arrPorteStanza[i].stanza;\n        stanzaLayer1Ref.current.src =\n          \"/img/stanze/\" + arrPorteStanza[i].stanza + \"/layer1.png\";\n        stanzaLayer2Ref.current.src =\n          \"/img/stanze/\" + arrPorteStanza[i].stanza + \"/layer2.png\";\n\n        let spawnPlayerX = arrPorteStanza[i].spawnPlayer[0];\n        let spawnPlayerY = arrPorteStanza[i].spawnPlayer[1];\n        return [spawnPlayerX, spawnPlayerY];\n      }\n    }\n    return false;\n  };\n\n  return {\n    getStanzaCorrente,\n    setPortaStanza,\n    checkCambioStanza,\n    updatePlayerPos,\n  };\n};\n\nexport default useStanze;\n"]},"metadata":{},"sourceType":"module"}